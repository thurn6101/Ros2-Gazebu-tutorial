<?xml version="1.0" ?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">


  <xacro:macro name="camera_rgb" params="parent_name sensor_name origin_xyz camera_ROLL camera_PITCH camera_YAW">

    <link name='${sensor_name}_camera_link'>
		<visual>
			<origin xyz="0 0 0"
					rpy="0 0 0"/>
			<geometry>
				<!-- <box size="${camera_box_x} ${camera_box_y} ${camera_box_z}"/> -->
                 <mesh filename="package://box_bot_description/meshes/sensors/realsense.dae" scale="0.25 0.25 0.25"/>
			</geometry>
		</visual>
	</link>

    <joint name="${sensor_name}_camera_link_joint" type="fixed">
		<origin rpy="${camera_ROLL} ${camera_PITCH} ${camera_YAW}" xyz="${origin_xyz}"/>
		<parent link="${parent_name}"/>
		<child link="${sensor_name}_camera_link"/>
	</joint>


    <link name="${sensor_name}_camera_link_frame">
    </link>

    <joint name="${sensor_name}_camera_frame_joint" type="fixed">
        <origin xyz="${camera_box_x} 0 0" rpy="0 0 0" />
        <parent link="${sensor_name}_camera_link" />
        <child link="${sensor_name}_camera_link_frame" />
        <axis xyz="0 0 0"/>
    </joint>

    <gazebo reference="${sensor_name}_camera_link_frame">
          <sensor type="camera" name="${sensor_name}">
            <always_on>1</always_on>
            <update_rate>1</update_rate>
            <camera name="head">
                <horizontal_fov>1.3962634</horizontal_fov>
                <image>
                <width>300</width>
                <height>300</height>
                <format>R8G8B8</format>
                </image>
                <clip>
                <near>0.02</near>
                <far>20.0</far>
                </clip>
                <noise>
                <type>gaussian</type>
                <!-- Noise is sampled independently per pixel on each frame.
                    That pixel's noise value is added to each of its color
                    channels, which at that point lie in the range [0,1]. -->
                <mean>0.0</mean>
                <stddev>0.007</stddev>
                </noise>
                <always_on>1</always_on>
                <update_rate>30</update_rate>
            </camera>

            <plugin name="plugin_name" filename="libgazebo_ros_camera.so">
                <ros>
                <namespace>${sensor_name}_ns</namespace>
                <argument>image_raw:=${sensor_name}_img</argument>
                <argument>camera_info:=${sensor_name}_info</argument>
                </ros>
                <camera_name>${sensor_name}_camera</camera_name>
                <frame_name>${sensor_name}_camera_link_frame</frame_name>
                <hack_baseline>0.07</hack_baseline>
            </plugin>
        </sensor>
    </gazebo>

  </xacro:macro>


  <xacro:macro name="wide_angle_camera" params="parent_name sensor_name origin_xyz camera_YAW">

    <link name='${sensor_name}_camera_link'>
		<visual>
			<origin xyz="0 0 0"
					rpy="0 0 0"/>
			<geometry>
				<box size="${camera_box_x} ${camera_box_y} ${camera_box_z}"/>
			</geometry>
		</visual>
	</link>

    <joint name="${sensor_name}_camera_link_joint" type="fixed">
		<origin rpy="0 0 ${camera_YAW}" xyz="${origin_xyz}"/>
		<parent link="${parent_name}"/>
		<child link="${sensor_name}_camera_link"/>
	</joint>


    <link name="${sensor_name}_camera_link_frame">
    </link>

    <joint name="${sensor_name}_camera_frame_joint" type="fixed">
        <origin xyz="${camera_box_x} 0 0" rpy="0 0 0" />
        <parent link="${sensor_name}_camera_link" />
        <child link="${sensor_name}_camera_link_frame" />
        <axis xyz="0 0 0"/>
    </joint>

    <gazebo reference="${sensor_name}_camera_link_frame">
        <sensor name="camera" type="wideanglecamera">
          <camera>
            <horizontal_fov>6.283</horizontal_fov>
            <image>
              <width>320</width>
              <height>240</height>
            </image>
            <clip>
              <near>0.1</near>
              <far>100</far>
            </clip>
            <!-- A new section named `lens`. -->
            <lens>
              <!-- type element is mandatory -->
              <type>custom</type>
              <!-- manually defined mapping function r = c1*f*fun(theta/c2 + c3) -->
              <!-- More information here: https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function -->
              <custom_function>
                <c1>1.05</c1>
                <!-- linear scaling -->
                <c2>4</c2>
                <!-- angle scaling -->
                <f>1.0</f>
                <!-- one more scaling parameter -->
                <fun>tan</fun>
                <!-- one of sin,tan,id -->
              </custom_function>
              <!-- if it is set to `true` your horizontal FOV will ramain as defined -->
              <!-- othervise it depends on lens type and custom function, if there is one -->
              <scale_to_hfov>true</scale_to_hfov>
              <!-- clip everything that is outside of this angle -->
              <cutoff_angle>3.1415</cutoff_angle>
              <!-- resolution of the cubemap texture, the highter it is - the sharper is your image -->
              <env_texture_size>512</env_texture_size>
            </lens>
            <always_on>1</always_on>
            <update_rate>30</update_rate>
          </camera>
          <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
            <cameraName>${sensor_name}</cameraName>
            <imageTopicName>image_raw</imageTopicName>
            <cameraInfoTopicName>camera_info</cameraInfoTopicName>
            <frameName>${sensor_name}_camera_link_frame</frameName>
            <hackBaseline>0.07</hackBaseline>
          </plugin>
        </sensor>
    </gazebo>

  </xacro:macro>


  <xacro:macro name="laser_scan" params="parent_name sensor_name origin_xyz sensor_YAW">

    <link name='${sensor_name}_laser_scan_link'>
        <visual name="visual_${parent_name}">
            <geometry>
                    <mesh filename="package://box_bot_description/meshes/sensors/rplidar.dae" scale="1.0 1.0 1.0"/>
            </geometry>
        </visual>
	</link>

    <joint name="${sensor_name}_laser_scan_link_joint" type="fixed">
		<origin rpy="0 0 ${sensor_YAW - 1.5708}" xyz="${origin_xyz}"/>
		<parent link="${parent_name}"/>
		<child link="${sensor_name}_laser_scan_link"/>
	</joint>


    <link name="${sensor_name}_laser_scan_frame">
    </link>



    <joint name="${sensor_name}_laser_scan_frame_joint" type="fixed">
        <origin xyz="0 0 0.03" rpy="0 0 0" />
        <parent link="${sensor_name}_laser_scan_link" />
        <child link="${sensor_name}_laser_scan_frame" />
        <axis xyz="0 0 0"/>
    </joint>


	<gazebo reference="${sensor_name}_laser_scan_frame">
		<sensor name="sensor_ray" type="ray">
        <pose>0 0 0 0 0 0</pose>
        <ray>
          <scan>
            <horizontal>
              <samples>200</samples>
              <resolution>1.0</resolution>
              <min_angle>-1.0</min_angle>
              <max_angle>1.0</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.05</min>
            <max>10.0</max>
          </range>
        </ray>
        <always_on>true</always_on>
        <visualize>true</visualize>
        <update_rate>100.0</update_rate>
        <plugin name="laser" filename="libgazebo_ros_ray_sensor.so">
          <ros>
            <namespace>/box_bot</namespace>
            <remapping>~/out:=laser_scan</remapping>
          </ros>
          <output_type>sensor_msgs/LaserScan</output_type>
        </plugin>
      </sensor>
	</gazebo>

  </xacro:macro>


<xacro:macro name="block_laser_scan" params="parent_name sensor_name origin_xyz sensor_YAW">

    <link name='${sensor_name}_laser_scan_link'>
        <visual name="visual_${parent_name}">
            <geometry>
                    <mesh filename="package://box_bot_description/meshes/sensors/realsense.dae" scale="0.25 0.25 0.25"/>
            </geometry>
        </visual>
	</link>

    <joint name="${sensor_name}_laser_scan_link_joint" type="fixed">
		<origin rpy="0 0 ${sensor_YAW - 1.5708}" xyz="${origin_xyz}"/>
		<parent link="${parent_name}"/>
		<child link="${sensor_name}_laser_scan_link"/>
	</joint>


    <link name="${sensor_name}_laser_scan_frame">
    </link>



    <joint name="${sensor_name}_laser_scan_frame_joint" type="fixed">
        <origin xyz="0 0 0" rpy="0 0 0" />
        <parent link="${sensor_name}_laser_scan_link" />
        <child link="${sensor_name}_laser_scan_frame" />
        <axis xyz="0 0 0"/>
    </joint>

    <gazebo reference="${sensor_name}_laser_scan_frame">
        <sensor type="ray" name="block_laser_sensor">
            <ray>
            <scan>
                <horizontal>
                    <samples>50</samples>
                    <resolution>1.0</resolution>
                    <min_angle>-1.0</min_angle>
                    <max_angle>1.0</max_angle>
                </horizontal>
                <vertical>
                    <samples>50</samples>
                    <resolution>1.0</resolution>
                    <min_angle>-1.0</min_angle>
                    <max_angle>1.0</max_angle>
                </vertical>
            </scan>
            <range>
                <min>0.10</min>
                <max>5.0</max>
                <resolution>0.01</resolution>
            </range>
            <!-- Using gazebo's noise instead of plugin's -->
            <noise>
                <type>gaussian</type>
                <mean>0.0</mean>
                <stddev>0.01</stddev>
            </noise>
            </ray>
            <!-- Using gazebo's update rate instead of plugin's -->
            <update_rate>30</update_rate>
            <plugin name="gazebo_ros_block_laser_controller" filename="libgazebo_ros_ray_sensor.so">
            <!-- Change namespace and output topic so published topic is /rrbot/laser/pointcloud -->
            <ros>
                <namespace>/rrbot/laser</namespace>
                <argument>~/out:=pointcloud</argument>
            </ros>
            <!-- Set output to sensor_msgs/PointCloud to get same output type as gazebo_ros_block_laser -->
            <output_type>sensor_msgs/PointCloud</output_type>
            <!-- <frame_name> ommited, will default to block_laser_link -->

            <!-- min_intensity instead of hokuyoMinIntensity -->
            <min_intensity>100.0</min_intensity>
            </plugin>
        </sensor>
    </gazebo>


</xacro:macro>



</robot>